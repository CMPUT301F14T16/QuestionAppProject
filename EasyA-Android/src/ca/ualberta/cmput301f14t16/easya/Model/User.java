package ca.ualberta.cmput301f14t16.easya.Model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 * Provides a method of storing and accessing all data relevant to a single
 * user, uniquely identified by the {@link User#id} field.
 */
public class User {
	/**
	 * A mutable, and non-unique identifier for the user. This {@link String}
	 * acts as the user's screen name.
	 */
	private String username;
	/**
	 * Acts as the user's login credential. A password of sorts, however
	 * extremely insecure.
	 */
	private String email;
	/**
	 * A unique and immutable identifier associated to this user.
	 */
	private String id;
	/**
	 * The date on which this User object was created.
	 */
	private Date createdOn;
	/**
	 * A list of all IDs associated to {@link Content} objects marked as
	 * "favourite" by the user.
	 */
	private List<String> favourites;

	/**
	 * Creates an empty User object.
	 */
	public User() {

	}

	/**
	 * Creates a new User object associated to the given email and username.
	 * {@link User#id} is automatically generated by calling
	 * {@link UUID#randomUUID()}.
	 * 
	 * @param email
	 *            Setter for {@link User#email}.
	 * @param username
	 *            Setter for {@link User#username}. If an empty string is
	 *            passed, a random username will be generated using
	 *            {@link User#generateNewUserName}.
	 */
	public User(String email, String username) {
		this.email = email;
		this.username = username.equals("") ? GeneralHelper.GenerateUserName() : username;
		this.id = UUID.randomUUID().toString();
		this.createdOn = new Date();
		this.favourites = new ArrayList<String>();
	}

	/**
	 * Returns a list of question ids for questions marked as favourite by the user.
	 * 
	 * @return A list of IDs {@link Content} objects marked as favourite by the
	 *         user.
	 */
	public List<String> getFavourites() {
		return favourites;
	}
	
	/**
	 * Checks if the {@link User} submitted is already in
	 * {@link Topic#favourites}. If they are, it removes them from the list.
	 * Otherwise, it adds them to it.
	 * 
	 * @param user
	 *            The {@link User} to be added.
	 */
	// returns true if favourited, false if unfavourited
	public boolean setFavourite(String qId) {		
		if (this.favourites.contains(qId)) {
			this.favourites.remove(qId);
			return false;
		} else {
			this.favourites.add(qId);
			return true;
		}
	}

	/**
	 * Sets {@link User#username}
	 * 
	 * @param newName
	 *            new username to set.
	 */
	public void setUserName(String newName) {
		this.username = newName;
	}

	/**
	 * @return {@link User#email}
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @return {@link User#username}
	 */
	public String getUsername() {
		return username;
	}

	/**
	 * @return {@link User#id}
	 */
	public String getId() {
		return id;
	}

	public Date getCreatedOn() {
		return createdOn;
	}
}
